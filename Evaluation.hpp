#ifndef DHBW_CHESS_EVALUATION
#define DHBW_CHESS_EVALUATION

#include <cstdint>

/**
 * piece values
 * 
 * source: https://www.chessprogramming.org/Simplified_Evaluation_Function
 */

enum class PieceValue
{
    WHITE_PAWN = 100,
    WHITE_BISHOP = 320,
    WHITE_KNIGHT = 330,
    WHITE_ROOK = 500,
    WHITE_QUEEN = 900,
    WHITE_KING = 10000,
    BLACK_PAWN = -100,
    BLACK_BISHOP = -320,
    BLACK_KNIGHT = -330,
    BLACK_ROOK = -500,
    BLACK_QUEEN = -900,
    BLACK_KING = -10000
};

/**
 * piece square tables
 * 
 * source: https://www.chessprogramming.org/Simplified_Evaluation_Function
 */

const int whitePawnTable[120] = 
{
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,  50,  50,  50,  50,  50,  50,  50,  50,   0,
    0,  10,  10,  20,  30,  30,  20,  10,  10,   0,
    0,   5,   5,  10,  25,  25,  10,   5,   5,   0,
    0,   0,   0,   0,  20,  20,   0,   0,   0,   0,
    0,   5,  -5, -10,   0,   0, -10,  -5,   5,   0,
    0,   5,  10,  10, -20, -20,  10,  10,   5,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0
};

const int whiteBishopTable[120] =
{
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0, -20, -10, -10, -10, -10, -10, -10, -20,   0,
    0, -10,   0,   0,   0,   0,   0,   0, -10,   0,
    0, -10,   0,   5,  10,  10,   5,   0, -10,   0,
    0, -10,   5,   5,  10,  10,   5,   5, -10,   0,
    0, -10,   0,  10,  10,  10,  10,   0, -10,   0,
    0, -10,  10,  10,  10,  10,  10,  10, -10,   0,
    0, -10,   5,   0,   0,   0,   0,   5, -10,   0,
    0, -20, -10, -10, -10, -10, -10, -10, -20,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0
};

const int whiteKnightTable[120] =
{
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0, -50, -40, -30, -30, -30, -30, -40, -50,   0,
    0, -40, -20,   0,   0,   0,   0, -20, -40,   0,
    0, -30,   0,  10,  15,  15,  10,   0, -30,   0,
    0, -30,   5,  15,  20,  20,  15,   5, -30,   0,
    0, -30,   0,  15,  20,  20,  15,   0, -30,   0,
    0, -30,   5,  10,  15,  15,  10,   5, -30,   0,
    0, -40, -20,   0,   5,   5,   0, -20, -40,   0,
    0, -50, -40, -30, -30, -30, -30, -40, -50,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0
};

const int whiteRookTable[120] =
{
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   5,  10,  10,  10,  10,  10,  10,   5,   0,
    0,  -5,   0,   0,   0,   0,   0,   0,  -5,   0,
    0,  -5,   0,   0,   0,   0,   0,   0,  -5,   0,
    0,  -5,   0,   0,   0,   0,   0,   0,  -5,   0,
    0,  -5,   0,   0,   0,   0,   0,   0,  -5,   0,
    0,  -5,   0,   0,   0,   0,   0,   0,  -5,   0,
    0,   0,   0,   0,   5,   5,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0
};

const int whiteQueenTable[120] =
{
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0, -20, -10, -10,  -5,  -5, -10, -10, -20,   0,
    0, -10,   0,   0,   0,   0,   0,   0, -10,   0,
    0, -10,   0,   5,   5,   5,   5,   0, -10,   0,
    0,  -5,   0,   5,   5,   5,   5,   0,  -5,   0,
    0,   0,   0,   5,   5,   5,   5,   0,  -5,   0,
    0, -10,   5,   5,   5,   5,   5,   0, -10,   0,
    0, -10,   0,   5,   0,   0,   0,   0, -10,   0,
    0, -20, -10, -10,  -5,  -5, -10, -10, -20,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0
};

const int whiteKingTableMiddleGame[120] =
{
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0, -30, -40, -40, -50, -50, -40, -40, -30,   0,
    0, -30, -40, -40, -50, -50, -40, -40, -30,   0,
    0, -30, -40, -40, -50, -50, -40, -40, -30,   0,
    0, -30, -40, -40, -50, -50, -40, -40, -30,   0,
    0, -20, -30, -30, -40, -40, -30, -30, -20,   0,
    0, -10, -20, -20, -20, -20, -20, -20, -10,   0,
    0,  20,  20,   0,   0,   0,   0,  20,  20,   0,
    0,  20,  30,  10,   0,   0,  10,  30,  20,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0
};

const int whiteKingTableEndGame[120] =
{
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0, -50, -40, -30, -20, -20, -30, -40, -50,   0,
    0, -30, -20, -10,   0,   0, -10, -20, -30,   0,
    0, -30, -10,  20,  30,  30,  20, -10, -30,   0,
    0, -30, -10,  30,  40,  40,  30, -10, -30,   0,
    0, -30, -10,  30,  40,  40,  30, -10, -30,   0,
    0, -30, -10,  20,  30,  30,  20, -10, -30,   0,
    0, -30, -30,   0,   0,   0,   0, -30, -30,   0,
    0, -50, -30, -30, -30, -30, -30, -30, -50,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0
};

const int blackPawnTable[120] = 
{
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,  50,  50,  50,  50,  50,  50,  50,  50,   0,
    0,  10,  10,  20,  30,  30,  20,  10,  10,   0,
    0,   5,   5,  10,  25,  25,  10,   5,   5,   0,
    0,   0,   0,   0,  20,  20,   0,   0,   0,   0,
    0,   5,  -5, -10,   0,   0, -10,  -5,   5,   0,
    0,   5,  10,  10, -20, -20,  10,  10,   5,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0
};

const int blackBishopTable[120] =
{
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0, -20, -10, -10, -10, -10, -10, -10, -20,   0,
    0, -10,   0,   0,   0,   0,   0,   0, -10,   0,
    0, -10,   0,   5,  10,  10,   5,   0, -10,   0,
    0, -10,   5,   5,  10,  10,   5,   5, -10,   0,
    0, -10,   0,  10,  10,  10,  10,   0, -10,   0,
    0, -10,  10,  10,  10,  10,  10,  10, -10,   0,
    0, -10,   5,   0,   0,   0,   0,   5, -10,   0,
    0, -20, -10, -10, -10, -10, -10, -10, -20,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0
};

const int blackKnightTable[120] =
{
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0, -50, -40, -30, -30, -30, -30, -40, -50,   0,
    0, -40, -20,   0,   0,   0,   0, -20, -40,   0,
    0, -30,   0,  10,  15,  15,  10,   0, -30,   0,
    0, -30,   5,  15,  20,  20,  15,   5, -30,   0,
    0, -30,   0,  15,  20,  20,  15,   0, -30,   0,
    0, -30,   5,  10,  15,  15,  10,   5, -30,   0,
    0, -40, -20,   0,   5,   5,   0, -20, -40,   0,
    0, -50, -40, -30, -30, -30, -30, -40, -50,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0
};

const int blackRookTable[120] =
{
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   5,  10,  10,  10,  10,  10,  10,   5,   0,
    0,  -5,   0,   0,   0,   0,   0,   0,  -5,   0,
    0,  -5,   0,   0,   0,   0,   0,   0,  -5,   0,
    0,  -5,   0,   0,   0,   0,   0,   0,  -5,   0,
    0,  -5,   0,   0,   0,   0,   0,   0,  -5,   0,
    0,  -5,   0,   0,   0,   0,   0,   0,  -5,   0,
    0,   0,   0,   0,   5,   5,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0
};

const int blackQueenTable[120] =
{
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0, -20, -10, -10,  -5,  -5, -10, -10, -20,   0,
    0, -10,   0,   0,   0,   0,   0,   0, -10,   0,
    0, -10,   0,   5,   5,   5,   5,   0, -10,   0,
    0,  -5,   0,   5,   5,   5,   5,   0,  -5,   0,
    0,   0,   0,   5,   5,   5,   5,   0,  -5,   0,
    0, -10,   5,   5,   5,   5,   5,   0, -10,   0,
    0, -10,   0,   5,   0,   0,   0,   0, -10,   0,
    0, -20, -10, -10,  -5,  -5, -10, -10, -20,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0
};

const int blackKingTableMiddleGame[120] =
{
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0, -30, -40, -40, -50, -50, -40, -40, -30,   0,
    0, -30, -40, -40, -50, -50, -40, -40, -30,   0,
    0, -30, -40, -40, -50, -50, -40, -40, -30,   0,
    0, -30, -40, -40, -50, -50, -40, -40, -30,   0,
    0, -20, -30, -30, -40, -40, -30, -30, -20,   0,
    0, -10, -20, -20, -20, -20, -20, -20, -10,   0,
    0,  20,  20,   0,   0,   0,   0,  20,  20,   0,
    0,  20,  30,  10,   0,   0,  10,  30,  20,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0
};

const int blackKingTableEndGame[120] =
{
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0, -50, -40, -30, -20, -20, -30, -40, -50,   0,
    0, -30, -20, -10,   0,   0, -10, -20, -30,   0,
    0, -30, -10,  20,  30,  30,  20, -10, -30,   0,
    0, -30, -10,  30,  40,  40,  30, -10, -30,   0,
    0, -30, -10,  30,  40,  40,  30, -10, -30,   0,
    0, -30, -10,  20,  30,  30,  20, -10, -30,   0,
    0, -30, -30,   0,   0,   0,   0, -30, -30,   0,
    0, -50, -30, -30, -30, -30, -30, -30, -50,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0,
    0,   0,   0,   0,   0,   0,   0,   0,   0,   0
};

/**
 * evaluation function:
 * 
 *  - count the material on the board:
 *    white pieces have values > 0
 *    black pieces have values < 0
 *    example: if the material count is > 0 white is in advantage
 *             a material count of 0 means both players are even
 * 
 *  - evaluate position:
 *    give bonuses for pieces standing well
 *    penalize pieces standing badly
 *    example: a night in the center of the board has more moving options and is
 *             therefore more advantageous than a knight on the edge of the board
 * 
 *  - TODO: perhaps other criteria to consider
 */
int evaluate_board(int8_t board[120]);

#endif
